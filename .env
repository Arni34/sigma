LEADTEX_API_KEY=x2hoZAqSxneFnuLdba3gB1UPjXh7bv3StBeq01LNoBj0oL8DxrSeoQq5E0hb
BOT_TOKEN=7647033044:AAFbIG_acAITSN3H913yolTKFsOStqjO0e4



import os
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
LEADTEX_API_KEY = os.getenv("LEADTEX_API_KEY")
LEADTEX_API_URL = "https://api.leadtex.com/contracts"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

def get_contracts():
    headers = {"Authorization": f"Bearer {LEADTEX_API_KEY}"}
    response = requests.get(LEADTEX_API_URL, headers=headers)
    return response.json() if response.status_code == 200 else []

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply("Привет! Используйте /sign для подписания документов.")

@dp.message_handler(commands=["sign"])
async def send_webapp_link(message: types.Message):
    contracts = get_contracts()
    if not contracts:
        await message.reply("Нет доступных договоров.")
        return

    contract_url = contracts[0]["file_url"]
    contract_id = contracts[0]["id"]
    webapp_url = f"https://your-webapp.com?contract_id={contract_id}&contract_url={contract_url}"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("Подписать договор", web_app={"url": webapp_url}))

    await message.reply("Откройте мини-приложение для подписания:", reply_markup=keyboard)

if _name_ == "_main_":
    executor.start_polling(dp, skip_updates=True)
